package com.test

import java.util.regex.Pattern

fun main() {
    val description =
        "<div>Предположение-гипотеза \"Подписка-упаковка\".</div><div>Из-за того, что рынок насыщен низкоквалифицированными игроками, которые в основной своей массе</div><div>занимаются, как и мы \"купи-продай\", и при этом считают, что у них есть высокая экспертиза в подборе запчастей,&nbsp;</div><div>а также из-за низкой квалификации наших горячо любимых сотрудников и филиалов, все утверждают, что единственный&nbsp;</div><div>маркетинговый рычаг, на который можно надавить, это цена, а не повышение сервиса, и накидывания каких-то других ценностей.</div><div>Опять-таки может с не совсеми корректной обратной связи, такие ценности как комфортабельный сайт, логистика и склад</div><div>присутствуют у всех игороков.&nbsp;</div><div><br></div><div>В связи с вышеизложенным, в голову приходит одна мысль, подписка-упаковка. То есть мы берем условный город, допустим Рязань,</div><div>анализируем за последние 3 месяца (тут самое сложное, постараюсь в ближайшее время сделать или назначить ответственным кого-нибудь),</div><div>и видим, что есть условный Клиент с оборотом до 100 тыс. руб, мы понимаем, что в самом лучшем случае мы с него заработаем грязными,</div><div>не вычитая расходов, максимум 10 тыс. руб. И мы выходим с предложением к этому Клиенту, где даем цены с нулевым заработком, т.е. нашу закупку.&nbsp;</div><div>Первые заказы (до 100 тыс. руб в общей сложности и сроком до 1 мес.) мы даем ему сделать бесплатно, на дальнейшие заказы (более 100 тыс.и далее после 1го месяца) мы продаем подписку, условно за 10 тыс. руб.,</div><div>то есть мы понимаем, что мы покупаем Лида с очень крутым оффером, за условные 10 тыс. руб. от которого откажется только человек, который всеми клеточками не любит АДЕО,</div><div>но возможно, и даже этот человек будет вынужден работать с АДЕО на таких условиях. То есть Клиент покупает работу со всеми поставщиками с нулевой наценкой и с нашими закупочными ценами.&nbsp;</div><div><br></div><div>Также, конечно потом потребуется разработать полную линейку подписок, с оборотами как у Клиентов из группы А.&nbsp;</div><div>Вроде бы это все тоже самое, и даже возможно, сейчас это дороже, чем Клиент бы просто купил это с наценкой 8%.&nbsp;</div><div>Именно по этому, есть основания полагать, что это бредовая идея взлетит, потому что мы предложим на общее обозрение наши закупочные цены по 700&nbsp;</div><div>поставщикам и логистику до условного города. Конечно же в этой схеме сразу просматривается препятствие в виде \"А что, если... они будут заказывать только бочки масел, лобовые стекла и кузовщину или мы будем раздавать в виде КЭВов бесплатные&nbsp;</div><div>аккаунты, и люди будут получать промокоды и пр. для бесплатных заказов и будут пользоваться только ими\", само собой это придется дорабатывать и на это вводить какие-то отдельные цены за логистику этого товара, касаемо пользованием бесплатными заказами будем пресекать перерегистрации. По большому счету, это те же яйца, только в профиль, но в этом безумном мире все решает упаковка, а не продукт.</div><div>Этой упаковкой возможно мы сделаем отличие от других Компаний, которые работают примерно в таком же сегменте.&nbsp;</div><div>В итоге мы становимся прозрачными для Клиента, мы должны получить крутейший оффер-КЭВ, понимание стоимости Лида, и возможно увеличение оборота и добавочной стоимости.&nbsp;</div><div><br></div><div>В этой модели просматривается еще одна ниша, очень похожая на zzap. Условно, для какого Клиента за условные 10 тыс. руб. или иную сумму мы можем открыть контакты поставщика. Тут тоже</div><div>можем поработать с градиентами стоимости.</div><div><br></div><div>Не судите строго... Прошу дать свои первичные комментарии Куроптеву Анастасию, Волобуеву Ольгу, Чернявского Илью и Яцукова Николая.</div>"
    val desc2 = "abc 26516516516554581"
    val length = description.length
    println(length)

    println(trim(desc2))

}

fun trim(message: String): String {
    val limit = 20

    return if (message.length > limit) {
        val length = limit - 3
        val pattern = Pattern.compile("^.{0,$length}\\b")
        val matcher = pattern.matcher(message)
        if (matcher.find()) {
            matcher.group(0).plus("...")
        } else {
            message.substring(0, length).plus("...")
        }
    } else {
        message
    }
}